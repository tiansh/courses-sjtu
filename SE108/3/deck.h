#ifndef DECK_H
#define DECK_H
#include "card.h"
class DeckEmpty { // 一个例外类型
};
const int DeckSize = 52;
class Deck {
    //一个标准的牌堆包括52张牌――没有大小王

    //牌堆
    Card deck[DeckSize]; 
    //下一张将被分发的牌
    int next; 

  public:

    //影响：构造一个新的牌堆，先以2-A排序后以黑红花片的顺序排好。第一
    //张牌为黑桃2
    Deck();

     //重置
    //影响：重置牌堆的状态为新的牌堆。
   void reset();

    //洗牌
    //要求：n是介于0和52之间（含）的数
    //修改：自己(this)
    //影响：将牌切成两部分：前半（称为左面）有n张牌，余下的为右边。需
    //要注意的是两边都可以是空的。然后，重新整理牌堆使得先是右面的第一
    //张牌，接下来是左边的第一张，右边的第二张，左边的第二章，以此类
    //推。一旦一边没有牌了，则将另一边的所有牌都放到这后面。最后，令这
    //里的第一张牌位下一个被分发(deal)的牌。例如，在刚刚reset()后，
    //shuffle(26)的结果为：花2、黑2、花3、黑3……片A、红A。
    //注意：如果shuffle被调用时已经有一些牌被用过了，这些牌需要首先恢
    //复到他们分发时的位置维持最近一次洗牌／重置的状态。
    void shuffle(int n);

    //分发
    //修改：自己
    //影响：返回下一张将被分发的牌，如果没有牌留下，抛出(throw)一个牌
    //堆为空(DeckEmpty)的事件。
    Card deal();

    //剩余牌数
    //影响：返回自上次发牌开始还没有被分发的牌的个数。
    int cardsLeft();
};
#endif
