;自定义简易脚本操作说明

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;语法格式如下：
;注释使用'或%或;开始
;注意，这里是大小写敏感的
;系统给定的字母内容全部为大写

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;根据变量名定义类型
;变量名除最后一位外无规定
;在变量名中间亦不可使用@$#:等字符
;亦不能使用空白字符
;名称没有保留字等限制
;最后一位为$的为字符串
;最后一位为@的为数据库
;最后一位为#的为整数
;最后一位为:的为行标
;最后一位为!的为字符
;不支持浮点数的运算
;变量无需声明，第一次赋值自动产生

;字面常量的书写
;十进制常量书写为#100#
;16进制书写为$64#
;字符串以""开头并终结
;使用\XX(XX为十六进制)转移字符。
;"\"字符只能使用"\5C"转义
;每次每个类型只能存在不超过5个字面常量

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;类型转换
;STON S$ N#
;        ~~
;NTOS N# S$ Len#
;        ~~
;CTOS C! S$
;        ~~
;STOC S$ C! Index#    %Index从0开始
;        ~~
;CTON C! I#
;        ~~
;NTOC I# C!
;        ~~
  
;LENS S$ Len#          %注意这里的字符串同样是见到"\00"则结束
;        ~~~~
  
;数组使用
;数组无需声明，但未引用过的下标会导致行为不确定
;字符串不视作字符型数组（但实际上他是）
;数组使用时
;数组名[索引值#]数组类型
;如A[N#]$表示一个字符串类型数组的第N#位
;由于数组根本不管理大小，所以没有数组的直接赋值也不能直接比较
;即便赋值了A[#3#]#，A[#1#]#仍然不会占用空间，不能引用。


;输出语句
;PRINTS S$
;          (NONE)
;PRINTN N#
;          (NONE)
;PRINTC C!
;          (NONE)
;GOTOXY N# N#     %不是跳转语句，移动光标位置
;          (NONE)
;WHEREXY X# Y#    %如果任意一个不需接收，可直接写##代替
;        ~~ ~~

;输入语句
;INPUTS S$ N# C!     %N表示最大长度
;       ~~
;INPUTN N#
;       ~~
;INPUTP S$           %输入密码使用的特殊函数
;       ~~
;INPUTD S$           %输入日期使用的特殊函数
;       ~~
;PAUSE        %按任意键继续
;CLEARK       %清除屏幕输入缓冲区的内容
;GETC C!      %读入单个按键保存到C中，不回显

;数据库操作
;LOAD DBF@ Path$ Name$       %装入DBF文件
;     ~~~~
;SETI DBF@ Path$ FieldIndex# %装入NDX文件
;     ~~~~
;GETR DBF@ Index# Rec$       %读取第Index个数据到Rec$，Index从0开始
;                 ~~~~
;PUTR DBF@ Index# Rec$       %写入Rec$到Index，0表示在末尾插入
;     ~~~~
;FTOR DBF@ Rec$ FI# Val$     %把字段写入到记录
;          ~~~~
;RTOF DBF@ Rec$ FI# Val$     %从记录中读取字段
;                   ~~~~
;FIND DBF@ Val$ Index# From# %从From开始向后在NDX中查找!如果未找到返回0
;                      ~~~~~
;DEL  DBF@ Index#            %删除第Index条数据（软删除）
;     ~~~~
;REC  DBF@ Index#            %恢复第Index条数据
;     ~~~~
;CLOSE DBF@                  %关闭DBF文件
;      ~~~~
;在LOAD后，会自动生成以下变量：
;DBF@Field$INDEX#
;DBF@Field$LEN#
;DBF@RECORDS#
;注意，如果在其它地方使用了同名变量，后果自负。

;数值操作
;LETN N1# N2#     %赋值n1:=n2
;     ~~~
;LETS S1$ S2$     %赋值s1:=s2
;     ~~~
;LETC C1! C2!     %赋值c1:=c2
;     ~~~
;ADD  N1# N2# N3# %加
;     ~~~
;SUB  N1# N2# N3# %减
;     ~~~
;MUL  N1# N2# N3# %乘
;     ~~~
;DIVL N1# N2# N3# %除法（商）
;     ~~~
;DIVH N1# N2# N3# %除法（余）
;     ~~~

;行标号
;行标号在声明时，使用:作为行开头，如
;:LOOP:
;跳转语句
;GOTO Label
;IFS S1$ S2$ Label %if s1=s2 then goto Label
;IFN N1# N2# Label %if n1=n2 then goto label
;IFC C1! C2! Label %if c1=c2 then goto label
;IFP N# Label      %if  n>0  then goto Label
;只在本文件中有效，不能跳转至另一个文件中
;若指向另一个文件的标号，程序的行为是不确定的
;若调用的两个文件中有相同的标号，行为将会是不确定的
;CALL Path$        %调用另一个本类型的文件，调用后返回
;GOTOF Path$       %跳转至另一个文件，不返回
;注意：各文件间的调用会简单共享所有数据作为全局数据
;任何对全局变量的修改都会导致结果在所有函数中被修改
;变量在所在文件中有效，除非在外部文件中先为声明
;使用任何未初始化的变量会导致不可预期的结果
;使用GOTOF跳转至另一文件，在该文件退出后仍然会返回上一级CALL调用的文件
;EXIT              %返回到上一层的文件调用，若没有上一层则退出
;HALT              %直接退出程序
;CLEAR             %清空所有数据
;注意：使用HALT或在最外层文件使用EXIT时务必先使用CLEAR清除数据
;否则会导致内存泄露。
;其他语句
;COMMAND Command$  %控制台

;其他说明
;语句没有分割符，以行作为分割
;不允许语句中换行
;空格处可连续多次空格或水平制表符
;未在语法中写明空格处不允许加入空格

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
;一些闲玩儿的内容：
;我写这么一个脚本是不是最近LC3弄的太多了……
;应该可以从这堆指令中看到许多长的像
;Pascal、BASIC、DOS、ASM、dBASE的命令
;其实本想做成dBASE的frm文件形式的，但苦于没找到资料
;经过各种纠结与纠结
;现在从情况上来看，是给做成一个简单的脚本解释器了
;仔细看变量名的那一部分说明
;你会发现其实我是允许汉字变量名的^_^

;先纠结了半天token识别的问题
;之后又纠结半天label的摞摞缸
;再之后是是否要引入array和该怎么弄的问题

;STON NTOS CTOS STOC CTON NTOC PRINTS PRINTN
;GOTOXY INPUTS INPUTN INPUTP PAUSE CLEARK PUTC GETC LOAD SETI GETR PUTR
;FTOR RTOF FIND DEL REC LETN LETS LETC ADD SUB MUL DIVL DIVH GOTO IFS IFN
;IFP CALL GOTOF EXIT HALT CLEAR COMMAND

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%!!!!!!!!!!!!!!!!!!!此说明已经陈旧，已经被更新，仅供参考!!!!!!!!!!!!!!!!!!!%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

;一些马后炮
;看完FORTRAN语言的IF语句之后觉得不错，不过好像改不了了。
;其IF格式为IF (数值型表达式) 标号1, 标号2, 标号3
;三个标号分别表示这个值为正负零三种情况。
